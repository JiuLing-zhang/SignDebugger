@using JiuLing.CommonLibs.ExtensionMethods
@using SignDebugger.Page.Components
@inherits LayoutComponentBase
@inject IWindowMoving WindowMoving;
@inject IDialogService DialogService

<style>
    .mud-appbar .mud-toolbar-gutters {
        padding-left: 10px;
        padding-right: 10px;
    }
</style>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_customTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Class="px-0" Elevation="25" Dense="true" @onmouseup="MouseUp" @onmousedown="MouseDown">

        <span style="font-size: 15px;cursor: default;">签名调试工具</span>

        <MudSpacer />
        @if (_webSetting != null)
        {
            @if (_webSetting.AppThemeInt == 0)
            {
                <MudTooltip Text="浅色主题">
                    <MudIconButton Icon="@Icons.Material.Filled.WbSunny"
                                   Size="Size.Small"
                                   Edge="Edge.End"
                                   OnClick="ChangeTheme" />
                </MudTooltip>
            }
            else if (_webSetting.AppThemeInt == 1)
            {
                <MudTooltip Text="深色主题">
                    <MudIconButton Icon="@Icons.Material.Filled.DarkMode"
                                   Size="Size.Small"
                                   Edge="Edge.End"
                                   OnClick="ChangeTheme" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="使用系统主题">
                    <MudIconButton Icon="@Icons.Material.Filled.AutoMode"
                                   Size="Size.Small"
                                   Edge="Edge.End"
                                   OnClick="ChangeTheme" />
                </MudTooltip>
            }
        }
        <MudTooltip Text="设置">
            <MudIconButton Icon="@Icons.Material.Filled.Settings"
                           Class="ml-2"
                           Size="Size.Small"
                           OnClick="OpenSettingsDialog" />
        </MudTooltip>
        <TitleBar Class="ml-3" />
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {

    private const string WebSettingsPath = "web-settings";
    private WebSettings _webSetting;
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    private MudTheme _customTheme;

    public MainLayout()
    {
        if (File.Exists(WebSettingsPath))
        {
            var json = File.ReadAllText(WebSettingsPath);
            _webSetting = json.ToObject<WebSettings>();
        }
        else
        {
            _webSetting = new WebSettings();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _customTheme = new MudTheme()
            {
                Palette = new PaletteLight()
                {
                    Primary = "#6EA1EF",
                    Secondary = Colors.Green.Accent4,
                    AppbarBackground = "#F5F5F5",
                    AppbarText = "#6EA1EF",
                    TableStriped = "#F5F5F5",
                    TableHover = "#F1F6FD",
                    DarkLighten = "#CACDD1"

                },
                PaletteDark = new PaletteDark()
                {
                    Primary = "#6EA1EF",
                    AppbarBackground = "#444444",
                    AppbarText = "#6EA1EF",
                    Background = "#333333",
                    Surface = "#333333",
                    TableStriped = "#292929",
                    TableHover = "#182437",
                    DarkLighten = "#494C50",
                    Black = "#858585",
                    TextPrimary = "#FFFFFF",
                    OverlayDark = "#7575757A"
                }
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetTheme();
        }
    }

    private async Task ChangeTheme()
    {
        if (_webSetting.AppThemeInt == 0)
        {
            _webSetting.AppThemeInt = 1;
        }
        else if (_webSetting.AppThemeInt == 1)
        {
            _webSetting.AppThemeInt = 2;
        }
        else
        {
            _webSetting.AppThemeInt = 0;
        }
        await File.WriteAllTextAsync(WebSettingsPath, _webSetting.ToJson());
        await SetTheme();
    }

    private async Task SetTheme()
    {
        switch (_webSetting.AppThemeInt)
        {
            case 0:
                _isDarkMode = await _mudThemeProvider.GetSystemPreference();
                break;
            case 1:
                _isDarkMode = false;
                break;
            case 2:
                _isDarkMode = true;
                break;
        }
        await InvokeAsync(StateHasChanged);
    }

    private void MouseDown(MouseEventArgs e)
    {
        WindowMoving.MouseDown();
    }

    private void MouseUp()
    {
        WindowMoving.MouseUp();
    }

    private void OpenSettingsDialog()
    {
        DialogService.Show<Settings>("签名调试工具", new DialogOptions() { NoHeader = true });
    }
}