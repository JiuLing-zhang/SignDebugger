@page "/"
@using JiuLing.CommonLibs.ExtensionMethods;
@using SignDebugger.Page.CommandManage;
@using System.Collections.Specialized;
@using SignDebugger.Page.Components
@inject IJSRuntime JSRuntime;
@inject ISnackbar Snackbar

<PageTitle>Index</PageTitle>

<div class="d-flex flex-grow-1 gap-4 mx-4 my-4">
    <MudPaper Class="flex-grow-1 px-2" Elevation="0">
        <MudTextField T="string"
                      Label="请输入原始字符串"
                      Variant="Variant.Text"
                      Immediate="true"
                      TextChanged="SourceTextChangedAsync" />

        <MudPaper Width="100%" Class="mt-5 overflow-y-scroll debug-step" Elevation="0">

            @foreach (var signItem in _signHistory)
            {
                <div class="d-flex justify-space-between">
                    <div class="detail my-3">
                        <div class="operation cursor-default">
                            @($"{signItem.Seq}. {signItem.Operation}")
                        </div>
                        <div class="mt-1 result">
                            @(signItem.Result)
                            <MudTooltip Text="复制" Class="ml-2">
                                <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                               Size="Size.Small"
                                               Color="Color.Inherit"
                                               OnClick="@(()=>CopyResultAsync(signItem.Result))"></MudIconButton>
                            </MudTooltip>
                        </div>
                    </div>
                    <div class="undo">
                        @if (signItem.Equals(_signHistory.Last()))
                        {
                            <MudTooltip Text="撤销">
                                <MudIconButton Icon="@Icons.Material.Filled.Undo"
                                               Size="Size.Medium"
                                               Color="Color.Warning"
                                               OnClick="UndoAsync"></MudIconButton>
                            </MudTooltip>
                        }
                    </div>
                </div>
                <MudDivider />
            }
        </MudPaper>

    </MudPaper>
    <MudPaper Width="400px" MinWidth="400px" Class="flex-grow-0" Elevation="0">
        <MudPaper Class="mt-3 pt-1 pb-2" Elevation="2">
            <MudText Typo="Typo.subtitle2" Class="ml-2 tools-title">工具</MudText>
            <MudDivider Class="my-2" />

            <MudTooltip Text="编辑参数项">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="OpenParametersEdit">
                    参数项
                </MudButton>
            </MudTooltip>
            <MudTooltip Text="参数字典序排序">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="OrderByAsync">
                    字典序
                </MudButton>
            </MudTooltip>

            <MudTooltip Text="等号 %3d">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="UrlEncodeLowerAsync">
                    Url 小写编码
                </MudButton>
            </MudTooltip>

            <MudTooltip Text="等号 %3D">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="UrlEncodeUpperAsync">
                    Url 大写编码
                </MudButton>
            </MudTooltip>

            <MudTooltip Text="%3d/%3D -> 等号">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="UrlDecodeAsync">
                    Url 解码
                </MudButton>
            </MudTooltip>

            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Small"
                       OnClick="Base64EncodingAsync">
                Base64 编码
            </MudButton>

            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Small"
                       OnClick="Base64DecodingAsync">
                Base64 解码
            </MudButton>

            <MudTooltip Text="整个字符串大写">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="ToUpperAsync">
                    转大写
                </MudButton>
            </MudTooltip>
            <MudTooltip Text="整个字符串小写">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="ToLowerAsync">
                    转小写
                </MudButton>
            </MudTooltip>

            <MudTooltip Text="将 Json 类型的参数提取为表单格式">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="JsonToFormAsync">
                    Json 提取
                </MudButton>
            </MudTooltip>
        </MudPaper>

        <MudPaper Class="my-4 py-2" Elevation="2">
            <MudText Typo="Typo.subtitle2" Class="ml-2 tools-title">构建</MudText>
            <MudDivider Class="my-2" />
            <MudTextFieldExtended @bind-Value="_separator"
                                  T="string"
                                  Class="mx-2 my-3"
                                  Immediate="true"
                                  Label="提取参数"
                                  Variant="Variant.Text"
                                  Margin="Margin.Dense">
                <AdornmentStart>
                    连接符
                </AdornmentStart>
                <AdornmentEnd>
                    <MudTooltip Text="@("连接字符串为空:param1=1&param2=2 -> param11param22;不为空:param1=1&param2=2 -> param11连接字符串param22")">
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="FetchParameterNameAndValueAsync">
                            提取键值
                        </MudButton>
                    </MudTooltip>
                    <MudTooltip Text="@("连接字符串为空:param1=1&param2=2 -> 12;不为空:param1=1&param2=2 -> 1连接字符串2")">
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="FetchParameterValueAsync">
                            提取值
                        </MudButton>
                    </MudTooltip>
                </AdornmentEnd>
            </MudTextFieldExtended>

            <MudTextFieldExtended @bind-Value="_fixString"
                                  T="string"
                                  Class="mx-2 my-3"
                                  Immediate="true"
                                  Variant="Variant.Text"
                                  Margin="Margin.Dense">
                <AdornmentStart>拼接</AdornmentStart>
                <AdornmentEnd>
                    <MudTooltip Text="向现有字符串添加前缀">
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="PrefixAsync">
                            加前缀
                        </MudButton>
                    </MudTooltip>
                    <MudTooltip Text="向现有字符串添加后缀">
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="PostfixAsync">
                            加后缀
                        </MudButton>
                    </MudTooltip>
                </AdornmentEnd>
            </MudTextFieldExtended>
        </MudPaper>

        <MudPaper Class="my-4 py-2" Elevation="2">
            <MudText Typo="Typo.subtitle2" Class="ml-2 tools-title">哈希</MudText>
            <MudDivider Class="my-2" />
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Small"
                       OnClick="MD5Async">
                MD5
            </MudButton>
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Small"
                       OnClick="SHA1Async">
                SHA1
            </MudButton>
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Small"
                       OnClick="SHA256Async">
                SHA256
            </MudButton>
        </MudPaper>

    </MudPaper>
</div>

<MudDrawer @bind-Open="@_isOpenParametersEdit"
           Anchor="Anchor.End"
           Width="400px"
           Elevation="1"
           Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader Class="d-flex justify-space-between align-center">
        <MudText Typo="Typo.subtitle2" Class="cursor-default">参数列表</MudText>
        @if (_parameters.Any())
        {
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Save"
                       Color="Color.Primary"
                       OnClick="SaveParametersAsync"
                       Size="Size.Small">
                保存
            </MudButton>
        }
    </MudDrawerHeader>
    <ParametersEdit Items="_parameters" ParametersChanged="OnParametersChanged" />
</MudDrawer>

<script>
    window.ScrollToDebugBottom = () => {
        let debugStepArray = document.getElementsByClassName("debug-step");
        if (debugStepArray.length == 0) {
            return;
        }
        let debugStep = debugStepArray[0];
        debugStep.scrollTop = debugStep.scrollHeight;
    };
</script>

@code {
    private bool _isOpenParametersEdit;
    private bool _isParametersChanged;
    private List<KeyValueItem> _parameters = new List<KeyValueItem>();
    private string _fixString = "";
    private string _separator = "";
    private string _signSource = "";
    private string _signValue = "";
    private List<SignItem> _signHistory = new List<SignItem>();
    private CommandExecutor _executor = new CommandExecutor();
    private async Task SourceTextChangedAsync(string value)
    {
        _signSource = value;
        _signValue = value;
        _signHistory.Clear();
        _executor = new CommandExecutor();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UndoAsync()
    {
        _executor.Undo();
        await RefreshContextAsync();
        if (_signValue.IsEmpty())
        {
            _signValue = _signSource;
        }
    }

    private async Task OpenParametersEdit()
    {
        _isOpenParametersEdit = true;
        _isParametersChanged = false;
        await BuildParametersAsync();
    }

    private async Task BuildParametersAsync()
    {
        _parameters = new List<KeyValueItem>();
        NameValueCollection queryParams = System.Web.HttpUtility.ParseQueryString(_signValue);
        for (int i = 0; i < queryParams.Count; i++)
        {
            var key = queryParams.GetKey(i) ?? "";
            if (key.IsEmpty())
            {
                continue;
            }
            _parameters.Add(new KeyValueItem(key, queryParams[i] ?? ""));
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveParametersAsync()
    {
        if (_isParametersChanged)
        {
            await DoCommandAsync(new ResetParameterCommand(_parameters));
        }
        _isOpenParametersEdit = false;
    }
    private void OnParametersChanged()
    {
        _isParametersChanged = true;
    }

    private async Task OrderByAsync()
    {
        await DoCommandAsync(new OrderByCommand(_signValue));
    }

    private async Task Base64EncodingAsync()
    {
        await DoCommandAsync(new Base64EncodingCommand(_signValue));
    }

    private async Task Base64DecodingAsync()
    {
        await DoCommandAsync(new Base64DecodingCommand(_signValue));
    }

    private async Task PrefixAsync()
    {
        await DoCommandAsync(new PrefixCommand(_signValue, _fixString));
    }

    private async Task PostfixAsync()
    {
        await DoCommandAsync(new PostfixCommand(_signValue, _fixString));
    }

    private async Task MD5Async()
    {
        await DoCommandAsync(new MD5Command(_signValue));
    }

    private async Task SHA1Async()
    {
        await DoCommandAsync(new SHA1Command(_signValue));
    }

    private async Task SHA256Async()
    {
        await DoCommandAsync(new SHA256Command(_signValue));
    }

    private async Task ToUpperAsync()
    {
        await DoCommandAsync(new ToUpperCommand(_signValue));
    }
    private async Task ToLowerAsync()
    {
        await DoCommandAsync(new ToLowerCommand(_signValue));
    }

    private async Task JsonToFormAsync()
    {
        await DoCommandAsync(new JsonToFormCommand(_signValue));
    }

    private async Task FetchParameterNameAndValueAsync()
    {
        await DoCommandAsync(new FetchParameterNameAndValueCommand(_signValue, _separator));
    }

    private async Task FetchParameterValueAsync()
    {
        await DoCommandAsync(new FetchParameterValueCommand(_signValue, _separator));
    }

    private async Task UrlEncodeLowerAsync()
    {
        await DoCommandAsync(new UrlEncodeLowerCommand(_signValue));
    }

    private async Task UrlEncodeUpperAsync()
    {
        await DoCommandAsync(new UrlEncodeUpperCommand(_signValue));
    }

    private async Task UrlDecodeAsync()
    {
        await DoCommandAsync(new UrlDecodeCommand(_signValue));
    }
    private async Task DoCommandAsync(ICommand command)
    {
        _executor.Execute(command);
        await RefreshContextAsync();
    }

    private async Task RefreshContextAsync()
    {
        _signValue = _executor.GetResult();
        _signHistory = _executor.GetHistory();
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
        await ScrollToDebugBottomAsync();
    }

    private async Task CopyResultAsync(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Snackbar.Add("内容已复制", Severity.Success);
    }

    private async Task ScrollToDebugBottomAsync()
    {
        await JSRuntime.InvokeVoidAsync("ScrollToDebugBottom");
    }
}