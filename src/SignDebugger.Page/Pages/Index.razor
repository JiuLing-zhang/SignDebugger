@page "/"
@using JiuLing.CommonLibs.ExtensionMethods;
@using JiuLing.CommonLibs.Security.Signature
@using SignDebugger.Page.CommandManage;
@using System.Collections.Specialized;
@using System.Web;

<PageTitle>Index</PageTitle>

<div class="d-flex flex-grow-1 gap-4 mx-4 my-4">
    <MudPaper Class="flex-grow-1 px-2" Elevation="0">
        <MudTextField T="string"
                      Label="请输入原始字符串"
                      Variant="Variant.Text"
                      Immediate="true"
                      TextChanged="SourceTextChangedAsync" />

        <MudPaper Width="100%" Class="mt-5" Elevation="0">

            @foreach (var signItem in _signHistory)
            {
                <div class="d-flex justify-space-between">
                    <div class="detail my-3">
                        <div class="operation">
                            @($"{signItem.Seq}. {signItem.Operation}")
                        </div>
                        <div class="mt-1 result">
                            @(signItem.Result)
                        </div>
                    </div>
                    <div class="undo">
                        @if (signItem.Equals(_signHistory.Last()))
                        {
                            <MudTooltip Text="撤销">
                                <MudIconButton Icon="@Icons.Material.Filled.Undo"
                                               Size="Size.Medium"
                                               Color="Color.Warning"
                                               OnClick="UndoAsync"></MudIconButton>
                            </MudTooltip>
                        }
                    </div>
                </div>
                <MudDivider />
            }
        </MudPaper>

    </MudPaper>
    <MudPaper Width="400px" MinWidth="400px" Class="flex-grow-0" Elevation="0">
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text="工具" IsInitiallyExpanded="true">

                <MudTooltip Text="删除指定参数">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="OpenDeleteParams">
                        参数项
                    </MudButton>
                </MudTooltip>
                <MudTooltip Text="参数字典序排序">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="OrderByAsync">
                        字典序
                    </MudButton>
                </MudTooltip>

                <MudTooltip Text="等号 %3d">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="UrlEncodeLowerAsync">
                        Url 小写编码
                    </MudButton>
                </MudTooltip>

                <MudTooltip Text="等号 %3D">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="UrlEncodeUpperAsync">
                        Url 大写编码
                    </MudButton>
                </MudTooltip>

                <MudTooltip Text="%3d/%3D -> 等号">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="UrlDecodeAsync">
                        Url 解码
                    </MudButton>
                </MudTooltip>

                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="Base64Async">
                    Base64
                </MudButton>

                <MudTooltip Text="整个字符串大写">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="ToUpperAsync">
                        转大写
                    </MudButton>
                </MudTooltip>
                <MudTooltip Text="整个字符串小写">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="ToLowerAsync">
                        转小写
                    </MudButton>
                </MudTooltip>

                <MudTooltip Text="将 Json 类型的参数提取为表单格式">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="JsonToFormAsync">
                        Json 提取
                    </MudButton>
                </MudTooltip>

            </MudExpansionPanel>
            <MudExpansionPanel Text="提取参数" IsInitiallyExpanded="true">
                <div class="d-flex justify-space-between align-end">
                    <MudTextField @bind-Value="_separator"
                                  Label="请输入连接字符"
                                  Variant="Variant.Text"></MudTextField>

                    <div>
                        <MudTooltip Text="@("连接字符串为空:param1=1&param2=2 -> param11param22;不为空:param1=1&param2=2 -> param11连接字符串param22")">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="FetchParameterNameAndValueAsync">
                                参数键值
                            </MudButton>
                        </MudTooltip>
                        <MudTooltip Text="@("连接字符串为空:param1=1&param2=2 -> 12;不为空:param1=1&param2=2 -> 1连接字符串2")">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="FetchParameterValueAsync">
                                参数值
                            </MudButton>
                        </MudTooltip>
                    </div>
                </div>
            </MudExpansionPanel>
            <MudExpansionPanel Text="拼接字符串" IsInitiallyExpanded="true">
                <div class="d-flex justify-space-between align-end">
                    <MudTextField @bind-Value="_fixString"
                                  Label="请输入字符串"
                                  Variant="Variant.Text"></MudTextField>
                    <div>
                        <MudTooltip Text="向现有字符串添加前缀">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="PrefixAsync">
                                加前缀
                            </MudButton>
                        </MudTooltip>
                        <MudTooltip Text="向现有字符串添加后缀">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="PostfixAsync">
                                加后缀
                            </MudButton>
                        </MudTooltip>
                    </div>
                </div>
            </MudExpansionPanel>
            <MudExpansionPanel Text="哈希" IsInitiallyExpanded="true">
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="MD5Async">
                    MD5
                </MudButton>
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="SHA1Async">
                    SHA1
                </MudButton>
                <MudButton Variant="Variant.Text"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="SHA256Async">
                    SHA256
                </MudButton>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>
</div>

<MudDrawer @bind-Open="@_isOpenDeleteParams"
           Anchor="Anchor.End"
           Width="400px"
           Elevation="1"
           Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">删除参数</MudText>
    </MudDrawerHeader>
    @if (!_parameterNames.Any())
    {
        <MudText Align="Align.Center">没有可用参数</MudText>
    }
    else
    {
        <div class="px-2">
            @foreach (var key in _parameterNames)
            {
                <MudChip Color="Color.Default"
                         Label="true"
                         Text="@(key)"
                         OnClose="RemoveKeyAsync">
                    @(key)
                </MudChip>
            }
        </div>
    }
</MudDrawer>

@code {

    private bool _isOpenDeleteParams;
    private List<string> _parameterNames = new List<string>();
    private string _fixString = "";
    private string _separator = "";
    private string _signSource = "";
    private string _signValue = "";
    private List<SignItem> _signHistory = new List<SignItem>();
    private CommandExecutor _executor = new CommandExecutor();
    private async Task SourceTextChangedAsync(string value)
    {
        _signSource = value;
        _signValue = value;
        _signHistory.Clear();
        _executor = new CommandExecutor();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UndoAsync()
    {
        _executor.Undo();
        await RefreshContextAsync();
        if (_signValue.IsEmpty())
        {
            _signValue = _signSource;
        }
    }
    private async Task RemoveKeyAsync(MudChip chip)
    {
        var key = chip.Text;
        _parameterNames.Remove(key);
        await DoCommandAsync(new RemoveParameterCommand(_signValue, key));
    }
    private void OpenDeleteParams()
    {
        _parameterNames = new List<string>();
        foreach (var key in HttpUtility.ParseQueryString(_signValue).AllKeys)
        {
            if (key != null)
            {
                _parameterNames.Add(key.ToString());
            }
        }
        _isOpenDeleteParams = true;
    }
    private async Task OrderByAsync()
    {
        await DoCommandAsync(new OrderByCommand(_signValue));
    }

    private async Task Base64Async()
    {
        await DoCommandAsync(new Base64Command(_signValue));
    }

    private async Task PrefixAsync()
    {
        await DoCommandAsync(new PrefixCommand(_signValue, _fixString));
    }

    private async Task PostfixAsync()
    {
        await DoCommandAsync(new PostfixCommand(_signValue, _fixString));
    }

    private async Task MD5Async()
    {
        await DoCommandAsync(new MD5Command(_signValue));
    }

    private async Task SHA1Async()
    {
        await DoCommandAsync(new SHA1Command(_signValue));
    }

    private async Task SHA256Async()
    {
        await DoCommandAsync(new SHA256Command(_signValue));
    }

    private async Task ToUpperAsync()
    {
        await DoCommandAsync(new ToUpperCommand(_signValue));
    }
    private async Task ToLowerAsync()
    {
        await DoCommandAsync(new ToLowerCommand(_signValue));
    }

    private async Task JsonToFormAsync()
    {
        await DoCommandAsync(new JsonToFormCommand(_signValue));
    }

    private async Task FetchParameterNameAndValueAsync()
    {
        await DoCommandAsync(new FetchParameterNameAndValueCommand(_signValue, _separator));
    }

    private async Task FetchParameterValueAsync()
    {
        await DoCommandAsync(new FetchParameterValueCommand(_signValue, _separator));
    }

    private async Task UrlEncodeLowerAsync()
    {
        await DoCommandAsync(new UrlEncodeLowerCommand(_signValue));
    }

    private async Task UrlEncodeUpperAsync()
    {
        await DoCommandAsync(new UrlEncodeUpperCommand(_signValue));
    }

    private async Task UrlDecodeAsync()
    {
        await DoCommandAsync(new UrlDecodeCommand(_signValue));
    }
    private async Task DoCommandAsync(ICommand command)
    {
        _executor.Execute(command);
        await RefreshContextAsync();
    }

    private async Task RefreshContextAsync()
    {
        _signValue = _executor.GetResult();
        _signHistory = _executor.GetHistory();
        await InvokeAsync(StateHasChanged);
    }
}